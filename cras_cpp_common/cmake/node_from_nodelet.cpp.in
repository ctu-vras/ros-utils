/**
 * \file
 * \brief Template for node made from a nodelet.
 * \author Martin Pecka
 * SPDX-License-Identifier: BSD-3-Clause
 * SPDX-FileCopyrightText: Czech Technical University in Prague
 */

#include <ros/datatypes.h>
#include <ros/duration.h>
#include <ros/init.h>
#include <ros/names.h>
#include <ros/node_handle.h>
#include <ros/this_node.h>
#include <rosconsole/macros_generated.h>

#include <nodelet/detail/callback_queue.h>
#include <nodelet/detail/callback_queue_manager.h>
#include <nodelet/nodelet.h>

#include <cras_cpp_common/log_utils/node.h>
#include <cras_cpp_common/param_utils/param_helper.hpp>
#include <cras_cpp_common/nodelet_utils/stateful_nodelet.hpp>

#cmakedefine01 CRAS_NODE_ANONYMOUS
#cmakedefine01 NODE_IGNORE_HEADER

#if NODE_IGNORE_HEADER
#include <class_loader/class_loader_core.hpp>
#else
#include <@NODELET_INCLUDE_FILE@>
#endif

namespace ros
{
namespace names
{
extern void init(const ros::M_string& remappings);
}
}

int main(int argc, char** argv)
{
  // Remove the program name from argv because the nodelet handling code does not expect it
  argc -= 1;
  argv += 1;
  ros::V_string my_argv;
  ros::removeROSArgs(argc, argv, my_argv);
  uint32_t initOptions = 0;
  if (CRAS_NODE_ANONYMOUS)
    initOptions = ros::init_options::AnonymousName;
  ros::init(argc, argv, "@NODE_NAME@", initOptions);
  // Anonymous nodes have a problem that topic remappings of type ~a:=b are resolved against the node name without the
  // anonymous part. Fix that by running names::init() again after ros::init() finishes and the full node name is known.
  // This was reported and a fix provided in https://github.com/ros/ros_comm/issues/2324, but the fix never landed.
  if (CRAS_NODE_ANONYMOUS)
    ros::names::init(ros::names::getUnresolvedRemappings());

  ros::NodeHandle pnh("~");
  nodelet::detail::CallbackQueueManager manager(pnh.param("num_worker_threads", @CRAS_NODE_DEFAULT_NUM_THREADS@));
  
  // Declaration order of these variables is important to make sure they can be properly stopped and destroyed.
#if NODE_IGNORE_HEADER
  auto nodelet = boost::shared_ptr<nodelet::Nodelet>(class_loader::impl::createInstance<nodelet::Nodelet>("@NODELET_CLASS@", nullptr));
#else
  auto nodelet = boost::make_shared<@NODELET_CLASS@>();
#endif
  if (nodelet == nullptr)
  {
    ROS_FATAL("Could not create node for nodelet @NODELET_CLASS@, factory failed.");
    return 1;
  }
  auto paramHelper = boost::dynamic_pointer_cast<cras::ParamHelper>(nodelet);
  if (paramHelper != nullptr)
    paramHelper->setLogger(std::make_shared<cras::NodeLogHelper>());
  auto stQueue = boost::make_shared<nodelet::detail::CallbackQueue>(&manager, nodelet);
  auto mtQueue = boost::make_shared<nodelet::detail::CallbackQueue>(&manager, nodelet);
  manager.addQueue(stQueue, false);
  manager.addQueue(mtQueue, true);
  
  nodelet->init(ros::this_node::getName(), {}, my_argv, stQueue.get(), mtQueue.get());

  auto statefulNodelet = dynamic_cast<cras::StatefulNodeletInterface*>(nodelet.get());
  if (statefulNodelet != nullptr)
  {
    ros::WallDuration timeout(0.1);
    while (ros::ok() && statefulNodelet->ok())
    {
      ros::spinOnce();
      timeout.sleep();
    }
    statefulNodelet->requestStop();
  }
  else
  {
    ros::spin();
  }

  // Destroying the nodelet helps stopping the queues.
  nodelet.reset();

  // Manager and callback queues are stopped and joined automatically in their destructors.
  // Explicitly removing the queues could lead to "boost: mutex lock failed" errors when stopping the node.

  return 0;
}
