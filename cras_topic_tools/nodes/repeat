#!/usr/bin/env python

import rospy
from roslib.message import get_message_class

pub = None
last_msg = None
timer = None


def cb(msg):
    global pub
    global last_msg
    global timer
    last_msg = msg
    if pub is None:
        # noinspection PyProtectedMember
        cls = get_message_class(msg._connection_header['type'])
        pub = rospy.Publisher("out", cls, queue_size=rospy.get_param("~out_queue_size", 10))
    if not publish_only_on_timer:
        pub.publish(msg)
    if reset_timer_on_msg and timer is not None:
        timer.shutdown()
        timer = None
    if timer is None:
        timer = rospy.Timer(rospy.Rate(rate).sleep_dur, timer_cb)


def timer_cb(event):
    if last_msg is not None and pub is not None:
        # noinspection PyUnresolvedReferences
        pub.publish(last_msg)


if __name__ == "__main__":
    rospy.init_node('repeat', anonymous=True)
    rate = rospy.get_param("~rate", 1.0)
    reset_timer_on_msg = rospy.get_param("~reset_timer_on_msg", True)
    publish_only_on_timer = rospy.get_param("~publish_only_on_timer", False)
    sub = rospy.Subscriber('in', rospy.AnyMsg, cb, queue_size=rospy.get_param("~in_queue_size", 10))
    rospy.spin()
