#!/usr/bin/env python

# SPDX-License-Identifier: BSD-3-Clause
# SPDX-FileCopyrightText: Czech Technical University in Prague

# Test helper for testing the repeater node's max_age parameter.

import rospy
import rostest
import unittest
import time
import sys

from geometry_msgs.msg import PointStamped

NAME = "test_repeater_max_age"


class MaxAge(unittest.TestCase):
    def __init__(self, *args):
        super(MaxAge, self).__init__(*args)
        rospy.init_node(NAME)
        self.num_msgs = 0

    def cb(self, msg):
        self.num_msgs += 1

    def test_max_age(self):
        sub = rospy.Subscriber(rospy.get_param("~subscriber_topic"), rospy.AnyMsg, self.cb, queue_size=100)
        pub = rospy.Publisher(rospy.get_param("~publisher_topic"), PointStamped, latch=True, queue_size=1)

        max_age = float(rospy.get_param("~max_age"))
        msg = PointStamped()
        msg.header.stamp = rospy.Time.now()

        # Publish first message to the repeater so that it starts publishing
        pub.publish(msg)

        # Wait until messages start coming
        wallclock_timeout = time.time() + float(rospy.get_param("~wait_time", 20.0))
        while self.num_msgs == 0 and time.time() < wallclock_timeout:
            time.sleep(0.1)

        # Publish a new message with current timestamp

        self.num_msgs = 0
        msg.header.stamp = rospy.Time.now()
        pub.publish(msg)

        # Wait for some time and count the messages
        time.sleep(max_age * 10)

        self.assertGreaterEqual(self.num_msgs, int(rospy.get_param("~min_msgs")))
        self.assertLessEqual(self.num_msgs, int(rospy.get_param("~max_msgs")))

        # Try to publish a message that is already too old at the time of publication

        self.num_msgs = 0
        msg.header.stamp = rospy.Time.now()
        time.sleep(max_age * 1.1)
        pub.publish(msg)

        time.sleep(max_age * 10)

        self.assertGreaterEqual(self.num_msgs, 0)
        self.assertLessEqual(self.num_msgs, 0)

        # Publish a new message with current timestamp (again, just to test things did not break before)

        self.num_msgs = 0
        msg.header.stamp = rospy.Time.now()
        pub.publish(msg)

        # Wait for some time and count the messages
        time.sleep(max_age * 10)

        self.assertGreaterEqual(self.num_msgs, int(rospy.get_param("~min_msgs")))
        self.assertLessEqual(self.num_msgs, int(rospy.get_param("~max_msgs")))


if __name__ == "__main__":
    time.sleep(0.75)
    try:
        rostest.run('rostest', NAME, MaxAge, sys.argv)
    except KeyboardInterrupt:
        pass
    print("exiting")
