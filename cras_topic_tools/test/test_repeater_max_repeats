#!/usr/bin/env python

# SPDX-License-Identifier: BSD-3-Clause
# SPDX-FileCopyrightText: Czech Technical University in Prague

# Test helper for testing the repeater node's max_repeats parameter.

import rospy
import rostest
import unittest
import time
import sys

from std_msgs.msg import String

NAME = "test_repeater_max_repeats"


class MaxRepeats(unittest.TestCase):
    def __init__(self, *args):
        super(MaxRepeats, self).__init__(*args)
        rospy.init_node(NAME)
        self.num_msgs = 0

    def cb(self, msg):
        self.num_msgs += 1

    def test_max_repeats(self):
        sub = rospy.Subscriber(rospy.get_param("~subscriber_topic"), rospy.AnyMsg, self.cb, queue_size=100)
        pub = rospy.Publisher(rospy.get_param("~publisher_topic"), String, latch=True, queue_size=1)
        reset_pub = rospy.Publisher("reset", String, queue_size=1)

        # Publish first message to the repeater so that it starts publishing
        pub.publish(String())

        # Wait until messages start coming
        wallclock_timeout = time.time() + float(rospy.get_param("~wait_time", 20.0))
        while self.num_msgs == 0 and time.time() < wallclock_timeout:
            time.sleep(0.1)

        # Wait for the prescribed time and count the messages
        time.sleep(float(rospy.get_param("~test_duration")))

        self.assertGreaterEqual(self.num_msgs, int(rospy.get_param("~min_msgs")))
        self.assertLessEqual(self.num_msgs, int(rospy.get_param("~max_msgs")))

        # Reset the counter, publish a new message - this should allow the repeater to start sending again

        self.num_msgs = 0
        pub.publish(String())

        time.sleep(float(rospy.get_param("~test_duration")))

        self.assertGreaterEqual(self.num_msgs, int(rospy.get_param("~min_msgs")))
        self.assertLessEqual(self.num_msgs, int(rospy.get_param("~max_msgs")))

        # Publish to the reset topic should not result in sending data again (the last message is reset, too)

        self.num_msgs = 0
        reset_pub.publish(String())

        time.sleep(float(rospy.get_param("~test_duration")))

        self.assertEqual(self.num_msgs, 0)

        # Now publish a new message

        self.num_msgs = 0
        pub.publish(String())

        time.sleep(float(rospy.get_param("~test_duration")))

        self.assertGreaterEqual(self.num_msgs, int(rospy.get_param("~min_msgs")))
        self.assertLessEqual(self.num_msgs, int(rospy.get_param("~max_msgs")))


if __name__ == "__main__":
    time.sleep(0.75)
    try:
        rostest.run('rostest', NAME, MaxRepeats, sys.argv)
    except KeyboardInterrupt:
        pass
    print("exiting")

